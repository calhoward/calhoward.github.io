[ { "title": "Seamless Function Key Switching for iTerm2 with Karabiner-Elements and Hammerspoon", "url": "/posts/Function-Key-Switching-for-iTerm2/", "categories": "", "tags": "", "date": "2024-09-08 13:54:00 -0400", "snippet": "Photo credit - Markus SpiskeEffortless Function Key Toggling for Terminal and System TasksFor developers who spend time in the terminal, especially on macOS, function keys are crucial. Switching be...", "content": "Photo credit - Markus SpiskeEffortless Function Key Toggling for Terminal and System TasksFor developers who spend time in the terminal, especially on macOS, function keys are crucial. Switching between system tasks like adjusting brightness or volume and terminal work can be frustrating if function keys aren’t responsive.This guide shows you how to achieve seamless function key toggling on macOS using iTerm2, Karabiner-Elements, and Hammerspoon. With this setup, function keys automatically switch to F1-F12 in iTerm2 and revert to their default macOS behavior when you switch to other apps, creating a smooth, lag-free experience.Why This Setup is a Game-ChangerBefore we dive into the technical setup, let’s appreciate the simplicity and beauty of this approach: Instant Switching: Function keys change instantly as you switch between iTerm2 and other apps– no delay. No Manual Toggle: The transition happens automatically in the background. Terminal-Specific Functionality: Perfect for terminal users needing F1-F12 without losing macOS functionality in other apps.Now, let’s set it up!Install Karabiner-ElementsIf you don’t already have it, Karabiner-Elements is an essential tool for remapping keys on macOS. It’s highly customizable and will allow us to create profiles for different applications.Download and install Karabiner-Elements from here.If you have Homebrew installed, you can use:brew install karabiner-elementsInstall HammerspoonHammerspoon is another powerful macOS automation tool that lets us script actions based on window focus, among many other things.Download and install Hammerspoon from here.Alternatively, Homebrew users may use:brew install hammerspoonConfiguring Karabiner-ElementsKarabiner-Elements allows us to create different profiles depending on the focused application, in this case, iTerm2.Open the Karabiner-Elements configuration file by navigating to ~/.config/karabiner/karabiner.json.Replace the contents of karabiner.json with the following:{ \"profiles\": [ { \"fn_function_keys\": [ { \"from\": { \"key_code\": \"f1\" }, \"to\": [{ \"key_code\": \"display_brightness_decrement\" }] }, { \"from\": { \"key_code\": \"f2\" }, \"to\": [{ \"key_code\": \"display_brightness_increment\" }] }, { \"from\": { \"key_code\": \"f3\" }, \"to\": [{ \"key_code\": \"mission_control\" }] }, { \"from\": { \"key_code\": \"f4\" }, \"to\": [{ \"key_code\": \"launchpad\" }] }, { \"from\": { \"key_code\": \"f5\" }, \"to\": [{ \"key_code\": \"illumination_decrement\" }] }, { \"from\": { \"key_code\": \"f6\" }, \"to\": [{ \"key_code\": \"illumination_increment\" }] }, { \"from\": { \"key_code\": \"f7\" }, \"to\": [{ \"key_code\": \"rewind\" }] }, { \"from\": { \"key_code\": \"f8\" }, \"to\": [{ \"key_code\": \"play_or_pause\" }] }, { \"from\": { \"key_code\": \"f9\" }, \"to\": [{ \"key_code\": \"fastforward\" }] }, { \"from\": { \"key_code\": \"f10\" }, \"to\": [{ \"key_code\": \"mute\" }] }, { \"from\": { \"key_code\": \"f11\" }, \"to\": [{ \"key_code\": \"volume_decrement\" }] }, { \"from\": { \"key_code\": \"f12\" }, \"to\": [{ \"key_code\": \"volume_increment\" }] } ], \"name\": \"Default profile\", \"selected\": true }, { \"complex_modifications\": { \"rules\": [ { \"description\": \"Map F1-F12 to function keys and allow modifiers in iTerm2\", \"manipulators\": [ { \"from\": { \"key_code\": \"f1\", \"modifiers\": { \"optional\": [\"any\"] } }, \"to\": [{ \"key_code\": \"f1\" }], \"type\": \"basic\" }, { \"from\": { \"key_code\": \"f2\", \"modifiers\": { \"optional\": [\"any\"] } }, \"to\": [{ \"key_code\": \"f2\" }], \"type\": \"basic\" }, { \"from\": { \"key_code\": \"f3\", \"modifiers\": { \"optional\": [\"any\"] } }, \"to\": [{ \"key_code\": \"f3\" }], \"type\": \"basic\" }, { \"from\": { \"key_code\": \"f4\", \"modifiers\": { \"optional\": [\"any\"] } }, \"to\": [{ \"key_code\": \"f4\" }], \"type\": \"basic\" }, { \"from\": { \"key_code\": \"f5\", \"modifiers\": { \"optional\": [\"any\"] } }, \"to\": [{ \"key_code\": \"f5\" }], \"type\": \"basic\" }, { \"from\": { \"key_code\": \"f6\", \"modifiers\": { \"optional\": [\"any\"] } }, \"to\": [{ \"key_code\": \"f6\" }], \"type\": \"basic\" }, { \"from\": { \"key_code\": \"f7\", \"modifiers\": { \"optional\": [\"any\"] } }, \"to\": [{ \"key_code\": \"f7\" }], \"type\": \"basic\" }, { \"from\": { \"key_code\": \"f8\", \"modifiers\": { \"optional\": [\"any\"] } }, \"to\": [{ \"key_code\": \"f8\" }], \"type\": \"basic\" }, { \"from\": { \"key_code\": \"f9\", \"modifiers\": { \"optional\": [\"any\"] } }, \"to\": [{ \"key_code\": \"f9\" }], \"type\": \"basic\" }, { \"from\": { \"key_code\": \"f10\", \"modifiers\": { \"optional\": [\"any\"] } }, \"to\": [{ \"key_code\": \"f10\" }], \"type\": \"basic\" }, { \"from\": { \"key_code\": \"f11\", \"modifiers\": { \"optional\": [\"any\"] } }, \"to\": [{ \"key_code\": \"f11\" }], \"type\": \"basic\" }, { \"from\": { \"key_code\": \"f12\", \"modifiers\": { \"optional\": [\"any\"] } }, \"to\": [{ \"key_code\": \"f12\" }], \"type\": \"basic\" } ] } ] }, \"name\": \"iTerm2\" } ]}This setup creates two profiles: one for iTerm2 where the F1-F12 keys behave like traditional function keys, and a default profile where they retain their macOS function key behavior (brightness, volume, etc.).The profiles in the JSON file are structured as follows:Default Profile: Assigns the usual system functions (e.g., brightness, volume) to the function keys.iTerm2 Profile: Remaps the function keys to behave as standard function keys (F1-F12), ideal for use in iTerm2.Setting up HammerspoonWe’ll use Hammerspoon to detect when iTerm2 is in focus and switch to the appropriate profile in Karabiner-Elements.Open the Hammerspoon configuration file by navigating to ~/.hammerspoon/init.lua.Replace the contents of init.lua with the following:-- Enable logging to track behavior in Console.apphs.logger.defaultLogLevel = 'info'local log = hs.logger.new('fnKeyLogger', 'info')-- Escaped path to Karabiner-Elements CLI (handle spaces in path)local karabinerCliPath = \"/Library/Application\\\\ Support/org.pqrs/Karabiner-Elements/bin/karabiner_cli\"-- Karabiner-Elements profile nameslocal defaultProfile = \"Default profile\"local iterm2Profile = \"iTerm2\"-- Function to switch Karabiner profileslocal function switchKarabinerProfile(profileName) -- Construct the command to be run inside a shell local command = string.format(\"sh -c '%s --select-profile \\\"%s\\\"'\", karabinerCliPath, profileName) log.i(\"Executing command: \" .. command) -- Log the command for debugging local result, status, exitCode = hs.execute(command) -- Log success or failure if status then log.i(\"Successfully switched to profile: \" .. profileName) else log.e(\"Error switching Karabiner profile. Output: \" .. result .. \" Exit Code: \" .. tostring(exitCode)) endend-- Function to switch to function key profile when iTerm2 is focusedlocal function enableFunctionKeys() log.i(\"iTerm2 focused: Enabling function key profile.\") switchKarabinerProfile(iterm2Profile)end-- Function to switch to media key profile when iTerm2 is not focusedlocal function disableFunctionKeys() log.i(\"iTerm2 unfocused: Enabling media key profile.\") switchKarabinerProfile(defaultProfile)end-- Watch for iTerm2 focus eventslocal appWatcher = hs.application.watcher.new(function(appName, eventType, app) if appName == \"iTerm2\" then if eventType == hs.application.watcher.activated then enableFunctionKeys() elseif eventType == hs.application.watcher.deactivated then disableFunctionKeys() end endend)-- Start the application watcherappWatcher:start()-- Ensure media keys are enabled when Hammerspoon reloadsdisableFunctionKeys()This script will automatically detect when iTerm2 becomes the active window and trigger the profile switch in Karabiner-Elements.Testing the SetupAfter configuring both tools, restart Karabiner-Elements and reload the Hammerspoon configuration (click the Hammerspoon icon in the menu bar and choose “Reload Config”).Now, open iTerm2 and press any of the function keys (F1-F12). You should notice that they behave like traditional function keys, enabling functionality that’s typically required in a terminal environment. Switch back to any other application, and your function keys will revert to their default macOS behavior– controlling brightness, volume, and other system settings.Enjoy Seamless SwitchingPhoto credit - Andrea PiacquadioWith everything set up, you can now enjoy the convenience of instantaneous profile switching. The moment iTerm2 comes into focus, your function keys will adjust accordingly, and they’ll seamlessly switch back once you exit iTerm2. The best part is that this setup works quietly in the background– no more manual toggling or hunting through system preferences to make function keys work as needed.Final ThoughtsThis setup is a testament to how powerful macOS automation can be when you combine the right tools. By leveraging Karabiner-Elements’ flexible key remapping and Hammerspoon’s window management capabilities, you can streamline your workflow in a way that feels truly frictionless. Whether you’re debugging code, managing servers, or switching between multiple terminal sessions, this configuration ensures that your function keys are always optimized for the task at hand.In the world of development, these small improvements can make a huge difference. Once you experience the ease of this setup, you’ll wonder how you ever lived without it!" }, { "title": "Headbanging: Hacking (fixing) the Taylor 063926-SER Interface Base Board", "url": "/posts/Taylor_C713_Interface_Board_Fix/", "categories": "", "tags": "", "date": "2022-07-13 12:00:00 -0400", "snippet": "Pictured - Taylor 063926-SER “Interface Base Board”Introducing: HeadbangingThis write-up is the first in my new series I’d like to call Headbanging. To kick off the series, join me on a circuitous ...", "content": "Pictured - Taylor 063926-SER “Interface Base Board”Introducing: HeadbangingThis write-up is the first in my new series I’d like to call Headbanging. To kick off the series, join me on a circuitous adventure as I dive deep down the rabbit hole of repairing a 2011 model Taylor soft serve machine (yes, the notorious, ever-faulty, engineered-to-fail brand of machines known for being broken at McYou-Know-Who’s).In this piece, I’ll detail my one-hell-of-a fix— a true hack, involving circuit modification— that I successfully performed on a faulty C713 unit.Without further adeiu, the story (and fix):Erratic behaviorAfter a particularly stormy summer weekend in coastal Georgia, I received a Monday morning service call about a broken soft serve machine. Thunderstorms always make me nervous, and afterwards I knew I was bound to hear from somebody with (now) faulty equipment.Stormy weather, the bane of electrical infrastucture - Photo credit: Suparerg SuksaiYes, some equipment was indeed faulty.The issue: one side of the machine isn’t dispensing anything, the other side won’t shut off.Great, I thought to myself, as I re-assured the panicked store manager everything will be fine. I have no idea what’s causing the issue or how to fix it.Time to get digging.Isolating the issueTo solve issues on a soft serve machine, one must think like a soft serve machine. Be the soft serve machine. Okay, maybe soft serve machines don’t have thoughts, but they do have hidden service menus: I entered my trusty access code, 5-2-3-1, and accessed the “Manual Control” screen.Unsurprisingly, the machine did not respect my commands as I instructed it to engage the left beater motor (the beater is responsible for dispensing the product), nor would it disengage the right beater motor.Cool, I thought, the machine has lost its mind. It must be some combination of a shorted wire and blown fuse, maybe a bad relay, or bad contactor coil.Pictured - the brains and circuitry of the C713I popped open the access panel and began testing components. Lo and behold, everything passed. Existential dread set in.Oh no, I thought, it’s the board. Something’s fried. In a wild ditch effort to confirm my suspicions, I transplanted a known-working interface board from an adjacent machine into the faulty machine (a maniac move). Surprise, surprise: I confirmed the issue is the interface board.This is problematic for several reasons: it’s a proprietary part, meaning no off-the-shelf components can solve the issue. It’s expensive, and waiting to get a replacement means that many days of lost potential in revenue for the store. And there’s two fried interface boards. This is just unacceptable to me, and I knew I had to come up with something creative to get this yogurt machine operational.Understanding the problemTo recap: we have a machine that won’t stop running the right-side beater motor, and won’t start the left-side beater motor. In other words, entirely dysfunctional. After accepting my fate, I buttoned the machine back up, condemned it by scribbling R.I.P in permanent marker on the back, and took both blown interface boards with me back to the office.Fig. 1 - A crop of the circuit diagram for the C713Armed with the circuit schematic (fig. 1), it didn’t take long for me to trace the output to the beater motor contactor back to pin 7 on the J6 connector. Okay, let’s look at how this pin operates:Fig. 2 - Close-up of the 063926-SER Interface Base BoardGlancing at the circuit, it’s visibly apparent that the pin is driven by a BTA16-600B triac, its output controlled by a MOC3162 optocoupler. This setup is identical for all seven pins on the J6 connector. Other outputs on this connector include condenser fan, compressor contactor, and overload switch.Fig. 3 - Diagram of the BTA16-600B pulled from the datasheetFig. 4 - Diagram of the MOC3162 pulled from the datasheetThe obvious solution, then, would be to replace the suspicious components.After pricing out an order, something dawned on me: there are seven of these triacs, but only four of them are populated by loads (only three are populated on the left board, as the right board solely controls the one condenser fan).Circuit boards are typically designed with redundancy, and these boards built by Taylor are no exception. They’re meant to fit in a range of models, each with different requirements. My point is, there are untapped power outputs on this board. It hasn’t been used to its full potential (yet)!The theorized hackOkay, so the beater motors are controlled by motor contactors, the contactors are driven by the BTA16-600B triac, the triac is switched by the MOC3162 optocoupler, and the optocoupler is commanded by none other than the Texas Instruments ULN2803A Darlington transistor array IC.Fig. 5 - Diagram of the ULN2803A pulled from the datasheetThe plan: to re-arrange the outputs of the IC in such a way that they command the unused (presumably not fried) set of optocoupled triacs (and re-arranging the loads on the J6 connector as such). With careful solder work, this is pretty much as easy as it sounds.For clarity, here is a diagram of how the outputs come configured on the stock circuit board:Fig. 6 - Current output configurationAnd here is a diagram of the plan on re-arranging the outputs:Fig. 7 - Re-arranged output configurationThe procedureI got to work immediately. The first order of business was to sever all of the traces from the output side of the ULN20803A leading to the optocouplers. I did this carefully with a rotary hand tool, fitted with a cut-off wheel:Fig. 8 - Close-up of the severed tracesWith all the traces from the IC to the optocouplers severed, it’s open season to re-arrange them any which way, as long as the known-to-be-fried outputs are avoided.I used cut-up lengths of CAT-5 strands from a junk Ethernet cord for my mod wires. Here is an image after everything was fully soldered up:Fig. 9 - The back of the 063926-SER Interface Base Board, moddedNot pictured, I dabbed a bit of hot glue over each solder point for extra guarantee that none of the connections would be compromised or otherwise disrupted.Also not mentioned, it was easier to destroy all the traces at once, even if some of them would be hooked back up, rather than precicely destroy the couple that I needed to in order move the power output.And that is the fix.Mission successWhew. Look at that. After rewiring, both boards installed and ran perfectly. Great success! The machine dispensed delicious frozen yogurt without a problem. I filled a victory cup, as I always do (so I can “test” the machine), ceremoniously scarfed the whole thing, and ended up with brainfreeze. Regardless of frozen-dairy-inflicted cranial discomfort, I was ecstatic.Pictured: Delicious frozen yogurt. Photo credit - Fuse Frozen CoWe may never know what fried both those boards. I’m assuming brown-outs or other power related issues due to inclement weather.Alas, with an understanding of circuitry, and no money spent, I was able to successfully breathe new life into these interface boards. No waiting for parts to ship, no burden placed on the company’s bottom line; a job well done.In the process, I learned quite a bit about how the C713 functions at its board logic level. I’m sure this knowledge will come in handy again in the future.Who knew it would be that simple? This is easily a hall-of-fame fix (for me). Please pass this write-up on if you found it interesting or helpful in any way. I can rest easy now, knowing that Taylor won’t be profiting off their own broken products again (if I’m there to do anything about it, at least)— not today.Shout-outs and thank you to Fuse Frozen Co. for enlisting my help, and for granting permission to publish my findings in this write-up." }, { "title": "Hacking the Leviton IPHS5-1LW In-Wall Humidity Sensor & Fan Control", "url": "/posts/Hacking_Leviton_Fan_Humidity_Switch/", "categories": "", "tags": "", "date": "2022-05-15 12:00:00 -0400", "snippet": "Pictured - The fully disassembled Leviton IPHS5-1LWIntroduction DANGER! This guide involves working with high voltage AC wiring. Do not attempt to perform manual wiring on any of the circuits in ...", "content": "Pictured - The fully disassembled Leviton IPHS5-1LWIntroduction DANGER! This guide involves working with high voltage AC wiring. Do not attempt to perform manual wiring on any of the circuits in your home. This guide is intended solely for educational use. DANGER! Do not disassemble AC wiring devices as even de-energized devices may store some lethal energy in their components.The Leviton IPHS5-1LW In-Wall Humidity Sensor &amp; Fan Control is a neat and novel method of controlling your bathroom fan. Its built-in humidity sensor turns the fan on when humidity is sensed, and then shuts it off when ambient humidity returns to normal (e.g. when the room steams up from a hot shower). This is certainly useful as a modern convenience, as well as it is a clever energy-saving device.As dandy as this little switch is, it’s smart, but it’s not smart smart. By smart smart, I mean internet-of-things smart. Unfortunately, this device’s automation routines are subject and limited to its own local decision-making, and cannot be externally influenced nor read from. Alas, this can be fixed:Pictured - Smart home device. Photo credit - Anete LusinaWith some reverse engineering and hacking, we can get this switch online and connected to our home automation server by integrating its logic with an Espressif ESP8266 Wi-Fi MCU . Once connected, we can even interface with it by using smart assistants like Alexa, Siri, and Google Home.This guide will explain the steps I went through in reverse engineering the Leviton IPHS5-1LW and interfacing its logic with the ESP8266 chip.Analyzing the boardThe first step in reverse-engineering a circuit is to take a glance at the board and find the main logic ICs. In this case, I identified the Microchip PIC16F1823 8-bit microcontroller IC as the main logic processor used in the Leviton IPHS5-1LW switch. The PIC16F1823 will be our main target for analyzing and hacking the circuit’s logic.Pictured - Fig. 1: Photo of the IPHS5-1LW logic boardPictured above (Fig. 1) is a close-up shot of the low-voltage logic board found in the Leviton IPHS5-1LW. The larger 14-pin SMT IC, in the top-right quadrant of the board, is our target: the PIC16F1823.From this image, we can see several empty through-hole pads used as test points in the factory where the board is assembled. These can be useful as probing points, as some of these have traces leading directly to the SMT pads on the PIC15F1823.Of course, the datasheet will tell us everything we need to know about each of the the I/O pins, as shown in the following diagram and pin allocation chart pulled from the datasheet:Pictured - Fig. 2: PIC16F1823 pinoutPictured - Fig. 3: PIC16F1823 pin allocation tableThis key shows us where the power pins, VSS (voltage source) and VDD (voltage drain), are located. From here, we just need to isolate the pins responsible for the logic of the fan relay driver and for the logic of the activation button. To do this, we will have to test probe the circuit while it is live.Probing the circuit DANGER! Exposing live high voltage AC house wiring while also exposing live disassembled AC wiring devices is extremely hazardous and possibly lethal. Do not do this.To locate the pins that control the fan and the button, I used my digital multimeter set to DC voltage to listen for the 3.3v logic on each general-purpose I/O pin, taking note of which pin I’m on by refrencing the pinout diagram and pin allocation diagram.Pictured - Exposing the logic board while circuit is poweredAfter careful probing, I found the fan control logic output at RC5. This pin normally outputs 0.0v (LOW) while the fan is off, and outputs 3.3v (HIGH) when the fan is running. After further careful probing, I found the button logic pin at RA0. This pin normally outputs 3.3v (HIGH), and changes to 0.0v (LOW) (short to ground) when the button is closed/depressed.Pictured - Fig. 4: Labeled traces on the PIC16F1823 chipWith the logic found and analyzed, it’s time to move on to the next step: soldering in our mod wires.Soldering in wiresFor modularity’s sake, and to speed up testing, I opted to use a rectangular male pin header jumper ribbon cable (with one end cut off for board soldering) to connect to the logic board. These male header pins will be accessible through the side of the black plastic case that houses the logic and relay board in the IPHS5-1LW (making use of the factory cutout).Pictured - Holding the circuit and mod wires using helping-hand clampsAfter careful soldering to VSS, VDD and RA0 via the through-hole pads, as well as RC5 via direct solder to the SMT pin of the IC, our little header cable is almost ready for action. All that’s left is to carefully re-assemble the case, securing the cable tightly and taping where necessary.Buttoning it upVoilà— the Leviton IPHS5-1LW switch is fully re-assembled and with exposed headers to leads VSS (3v3), VDD (ground), RA0 (activation button), and RC5 (fan relay driver) from the PIC15F1823 microcontroller.Pictured - The fully packaged IPHS5-1LW with modded signal wires addedWith the relevant logic channels exposed, the next step is to use the exposed channels to interface with an Espressif ESP8266 board in order to achieve full control of the circuit via Wi-Fi.To be continued… As of May 2022 this project is under active development. This guide will be expanded to include ESP8266 programming and adding Wi-Fi control at some point in the future. Check back soon, or check the project’s Github page for updates.RefrencesIPHS5-1LW on LevitonPIC16F1823 on DigiKey" }, { "title": "Backing up an openMAINT Database with pg_dump", "url": "/posts/Backing_up_openMAINT_Database/", "categories": "", "tags": "", "date": "2022-04-30 10:48:00 -0400", "snippet": "Photo credit - panumas nikhomkhaiIntroductionThe information in your openMAINT instance is stored in a PostgreSQL database. It can be simply backed up in the form of a .dump file with a single com...", "content": "Photo credit - panumas nikhomkhaiIntroductionThe information in your openMAINT instance is stored in a PostgreSQL database. It can be simply backed up in the form of a .dump file with a single command.Follow this guide for an explanation of how pg_dump works in the context of openMAINT’s database. Note: At the time of writing, the most recent version of openMAINT is openMAINT 3.4 and it is still recommended to use PostgreSQL version 10, so this guide will assume your database is also configured for use with PostgreSQL 10.Backing up the databaseWe will use pg_dump to create a .dump file of our PostgreSQL database. Modify the following command to fit your database and name the output file, and use it to create your database backup: pg_dump -Fc -h 127.0.0.1 --cluster 10/main -U postgres &lt;your_database_name&gt; -f openMAINT_backup_MM_DD_YYYY.dump The -Fc flag specifies that the database has a custom format. The -h flag specifies the host 127.0.0.1 in the case of a standard openMAINT installation The --cluster flag specifies version 10/main. This is necessary to avoid version mismatching when restoring to an instance of openMAINT running on top of PostgreSQL 10. The -U flag is our user, postgres, in the case of a standard openMAINT installation The -f flag specifies our filename.dumpThat’s it! You will find your output .dump file in whatever directory you ran the command in.DisclaimerI am not affiliated with Tecnoteca Srl., nor am I maintainer of either openMAINT, or CMDBuild. This guide is written in good faith, and in the spirit of contribution towards the Free Software Movement, for consumption as-is.Some of the steps listed in this guide may break or cease to function as software packages are updated, deprecated, or become obseleted.RefrencesopenMAINT on SourceForgeopenmaint.orgpg_dump on postgresql.org" }, { "title": "Installing openMAINT 3.4 on Debian 11 \"Bullseye\"", "url": "/posts/Installing_openMAINT_Debian11/", "categories": "", "tags": "", "date": "2022-04-29 10:48:00 -0400", "snippet": "Photo credit - Kateryna BabaievaIntroductionopenMAINT is a ready-to-use CMMS program (Computerized Maintenance Management System) created and maintained by Tecnoteca Srl. It is a powerful tool that...", "content": "Photo credit - Kateryna BabaievaIntroductionopenMAINT is a ready-to-use CMMS program (Computerized Maintenance Management System) created and maintained by Tecnoteca Srl. It is a powerful tool that, when configured to suit the needs of your enterprise, can transform the way you organaize and manage your work. openMAINT is a “verticalized” solution built on top of CMDBuild, also maintained by Tecnoteca, Srl.Check out Tecnoteca’s What is openMAINT page to learn more about the project, or request a demo to see if openMAINT might work for you.Installing the base systemPhoto credit - Field EngineerTo continue, we will assume you have already installed a fresh copy of Debian 11 “Bullseye” (stable) running openssh-server (or your preferred SSH server of choice), with root access enabled. A desktop environment is not required to set up an openMAINT server.Follow my guide on installing Debian 11 if you’re unsure of how to get a Debian system up and running. Also, follow my other guide on installing and setting up a SSH server if you’re unsure of how to do that.Once the above requirements are satisfied and you are able to remotely connect to your Debian server, continue to the next step.Logging in for the first timeWe will mainly be interacting with our server by using the SSH protocol. From any terminal, use the ssh command to log in with the user you created while setting up Debian. In our case, I’ve named the user openmaint:ssh openmaint@&lt;server_ip&gt;Make sure your user has access to sudo privileges by issuing the whoami command. The console should return root:sudo whoamiWe trust you have received the usual lecture from the local SystemAdministrator. It usually boils down to these three things: #1) Respect the privacy of others. #2) Think before you type. #3) With great power comes great responsibility.[sudo] password for openmaint:rootUpdating the systemBefore we install any software, make sure your system is up to date. We will accomplish this by running apt update &amp; apt upgrade. Use the -y flag to save time and skip “yes” prompts.Download updated package information from all configured sources:sudo apt update -yUpgrade all installed packages to their latest versions:sudo apt upgrade -yInstalling utilitiesIn order to bring about the successful installation of openMAINT (and all its dependencies), we will be working with a few commandline utilities. These utilities are gnupg2, wget, unzip, git, curl, and nano.Install them all simultaneously with the following single command. Use the -y flag to save time and skip “yes” prompts:sudo apt install -y gnupg2 wget unzip git curl nanoInstalling dependenciesNow that our system is up-to-date, it is time to install dependencies required by openMAINT 3.4. Use the -y flag to save time and skip “yes” prompts.openjdk-17-jdk:sudo apt install -y openjdk-17-jdkTo make sure OpenJDK 17 has been installed correctly, and that your $JAVA_HOME environment variable is correctly configured, use the java -version command:java -versionopenjdk version \"17.0.2\" 2022-01-18OpenJDK Runtime Environment (build 17.0.2+8-Debian-1deb11u1)OpenJDK 64-Bit Server VM (build 17.0.2+8-Debian-1deb11u1, mixed mode, sharing)At the time of writing, the most up-to-date build is 17.0.2. If you don’t see at least version 17.x.x, you may have to configure alternatives for Java:sudo update-alternatives --config javaThere are 2 choices for the alternative java (providing /usr/bin/java). Selection Path Priority Status------------------------------------------------------------* 0 /usr/lib/jvm/java-17-openjdk-amd64/bin/java 1711 auto mode 1 /usr/lib/jvm/java-11-openjdk-amd64/bin/java 1111 manual mode 2 /usr/lib/jvm/java-17-openjdk-amd64/bin/java 1711 manual modePress &lt;enter&gt; to keep the current choice[*], or type selection number:In my case, I also had OpenJDK 11 installed. Simply type the correct number and press &lt;enter&gt;.0update-alternatives: using /usr/lib/jvm/java-17-openjdk-amd64/bin/java to provide /usr/bin/java (java) in auto modeNext, we must add PostgreSQL repos to our sources list.Run the following command to install the GPG key:wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -Warning: apt-key is deprecated. Manage keyring files in trusted.gpg.d instead (see apt-key(8)).OKNext, add PostgreSQL repository to your apt sources:echo \"deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main\" |sudo tee /etc/apt/sources.list.d/pgdg.listdeb http://apt.postgresql.org/pub/repos/apt/ bullseye-pgdg mainUpdate your system. Use the -y flag to save time and skip “yes” prompts:sudo apt update -yFinally, install PostgreSQL. Use the -y flag to save time and skip “yes” prompts:sudo apt install -y postgresql-13 postgresql-client-10 postgresql-10-postgis-3 libpostgis-javaOnce PostgreSQL is installed, it is time to pick a strong password and apply it to the user postgres.Use passwd to set your new strong password:sudo passwd postgresNew password:Retype new password:passwd: password updated successfullyNext, we must update the postgres role with the new password. Use the su (switch user) command to switch to the postgres user:su - postgresPassword:Use psql to alter the password for postgres:psql -d template1 -c \"ALTER USER postgres WITH PASSWORD 'StrongPassword';\"ALTER ROLEThen type exit to log out:exitlogoutInstalling openMAINTNow that openMAINT’s dependencies are installed and properly configured, we can now move forward and install openMAINT.Use wget to download the latest .war file for openMAINT. At the time of writing, the latest version is openmaint-2.2-3.4.wget https://sourceforge.net/projects/openmaint/files/2.2/Core%20updates/openmaint-2.2-3.4/openmaint-2.2-3.4.warNow, execute the install script with java:java -jar openmaint-2.2-3.4.war installFollow through the prompts. You may leave all of the defaults as they are by pressing &lt;enter&gt; on each line. Make sure you enter your strong password you created for the postgres user.CMDBuild interactive install wizard - welcome!this wizard will guide you in the process of installing and configuring a new instance of CMDBuild!Press &lt;enter&gt; to leave the default install location:tomcat install location &lt;/home/openmaint/cmdbuild_30&gt; :Press &lt;enter&gt; to leave the default http port:tomcat http port &lt;8080&gt;:Press &lt;enter&gt; to leave the default shutdown port:tomcat shutdown port (offset already applied) &lt;8005&gt;:Press &lt;enter&gt; to leave the default debug port:tomcat debug port (offset already applied) &lt;8000&gt;:Press &lt;enter&gt; to leave the default postgres database host/port:postrgres db &lt;localhost:5432&gt; : Input your strong password for the postgres user:postrgres admin account &lt;postgres/postgres&gt; : postgres/StrongPasswordPress &lt;enter&gt; to leave the default database name:WARNING: server version 10.20 is not supported, you may encounter problemscmdbuild posrgres database name &lt;cmdbuild_a70b&gt; :To initialize openMAINT with a blank database, load empty.dump.xz:database dump to load &lt;demo&gt; : empty.dump.xzLook over your inputs and verify the configuration is correct:we're ready to begin, this is your configuration: tomcat: /home/openmaint/cmdbuild_30 http port: 8080 shutdown port: 8005 debug port: 8000 postgres database: localhost:5432/cmdbuild_a70b database dump: empty.dump.xzif everything is ok, press ENTER to begin installation&lt;press enter to begin&gt;Press &lt;enter&gt; to begin installation:BEGIN installationinstall tomcat...OKcreate database...create database cmdbuild_a70b empty.dump.xzapply patchesadjust configsdoneOKcmdbuild successfully installed! you can find startup/shutdown scripts in dir /home/openmaint/cmdbuild_30/binopenMAINT and its dependencies are now successfully installed.Starting openMAINTNow that openMAINT and its dependencies are installed, it is time to start the server up. Navigate to the bin directory to find the startup script:cd ~/cmdbuild_30/binRun startup.sh:./startup.shUsing CATALINA_BASE: /home/openmaint/cmdbuild_30Using CATALINA_HOME: /home/openmaint/cmdbuild_30Using CATALINA_TMPDIR: /home/openmaint/cmdbuild_30/tempUsing JRE_HOME: /usrUsing CLASSPATH: /home/openmaint/cmdbuild_30/bin/bootstrap.jar:/home/openmaint/cmdbuild_30/bin/tomcat-juli.jarUsing CATALINA_OPTS:Using CATALINA_PID: /home/openmaint/cmdbuild_30/bin/catalina.pidTomcat started.That’s it! openMAINT is now running on your local server and is accessible via http://&lt;server-ip&gt;:8080/cmdbuild/ui.For further reading, check out my other guide Securing Your openMAINT Server on Debian 11 with SSL.For help onboarding, see Onboarding openMAINT 3.4.DisclaimerI am not affiliated with Tecnoteca Srl., nor am I maintainer of either openMAINT, or CMDBuild. This guide is written in good faith, and in the spirit of contribution towards the Free Software Movement, for consumption as-is.Some of the steps listed in this guide may break or cease to function as software packages are updated, deprecated, or become obseleted.RefrencesopenMAINT on SourceForgeopenmaint.org" }, { "title": "Installing GNU Hello on Debian 11", "url": "/posts/Installing_Hello_Debian11/", "categories": "", "tags": "", "date": "2022-04-28 13:54:00 -0400", "snippet": "Photo credit - PixabayIntroductionThe GNU hello program produces a familiar, friendly greeting. It allows non-programmers to use a classic computer science tool which would otherwise be unavailable...", "content": "Photo credit - PixabayIntroductionThe GNU hello program produces a familiar, friendly greeting. It allows non-programmers to use a classic computer science tool which would otherwise be unavailable to them.This tutorial is written for Debian 11, however this process should work for most Debian or Ubuntu based systems. Follow along to learn how to install GNU Hello.Updating the systemFirst, make sure your system is up to date. We will accomplish this by running apt update &amp; apt upgrade.Download updated package information from all configured sources:sudo apt updateUpgrade all installed packages to their latest versions:sudo apt upgradeInstalling HelloNext, install Hello:sudo apt install helloThat’s it, we’re done! Now, test the output of Hello:helloHello, world!RefrencesGNU Hello" }, { "title": "Creativity", "url": "/posts/Creativity/", "categories": "", "tags": "", "date": "2022-04-28 11:50:00 -0400", "snippet": "Oh boy, here I go creating again!Welcome to my blog. This is a “Hello World” post. I’ll be updating this website with my findings, tutorials, how-to’s; whatever I can to help the community at large...", "content": "Oh boy, here I go creating again!Welcome to my blog. This is a “Hello World” post. I’ll be updating this website with my findings, tutorials, how-to’s; whatever I can to help the community at large.As a general principle, I follow and support the notions of the Free Software Movement, formally founded by Richard Stallman upon launching the GNU Project in 1983. I would like to expand upon and build on these notions and principles by personally proclaiming that I believe each and every discovery made by humanity— not limited to software and computing, rather, applying to all fields of innovation and technology— should be documented, “open-sourced”, and freely accessible to all.The goal of my website is to experiment with things and share my discoveries with the world. I dabble in technology such as computer systems, programming, automation technologies, experimental manufacturing with 3D printing, circuit design, laser cutting, and so much more.I built this website with the goals of helping and sharing in mind. I hope whatever information I’m able to provide may be used by whomever else may need or benefit from it. If anything I share is helpful or useful, please forward the information along as it suits your (or anybody else’s) need.I am reachable via my email, cal@calhoward.com. Please also follow links to my socials, as listed on this website as well. I love hearing from other experimenters.That’s all for now. I’m excited to document and upload all of my findings that I think might be useful to other people. If you’re reading this, whatever you do, do this: Don’t stop learning, creating, innovating. Makers, creators, movers and shakers are our hope of survival.Do good things,— Cal" } ]
